# main_app.py
import streamlit as st
import uuid
from langchain_core.messages import HumanMessage, AIMessage, ToolMessage
import time
from datetime import datetime

# Nh·∫≠p h√†m t·∫°o graph t·ª´ graph_builder.py
from graph_builder import create_recruitment_graph

# --- PH·∫¶N 0: C·∫§U H√åNH GI·ªöI H·∫†N Y√äU C·∫¶U (RATE LIMITING) ---
REQUESTS_PER_MINUTE = 15
REQUESTS_PER_DAY = 50 
# L∆∞u √Ω: Gi·ªõi h·∫°n 1,000,000 token/ph√∫t l√† c·ªßa API Gemini v√† ƒë∆∞·ª£c qu·∫£n l√Ω ·ªü ph√≠a Google,
# kh√¥ng ƒë∆∞·ª£c th·ª±c thi tr·ª±c ti·∫øp trong m√£ ngu·ªìn c·ªßa ·ª©ng d·ª•ng n√†y.

# --- PH·∫¶N 1: KH·ªûI T·∫†O ·ª®NG D·ª§NG V√Ä GRAPH ---

st.set_page_config(page_title="Khoa Dang Le's AI Assistant", page_icon="ÔøΩ")

st.title("ü§ñ Khoa Dang Le's AI Recruiter Assistant")
st.markdown("""
Welcome, Recruiter! I am an AI assistant representing Khoa Dang Le.
You can ask me anything about his CV, from his experience and projects to his technical skills.
I'm here to provide you with accurate information quickly. Let's chat!
""")

# T·∫°o graph ch·ªâ m·ªôt l·∫ßn v√† l∆∞u v√†o cache c·ªßa Streamlit ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
@st.cache_resource
def get_graph():
    return create_recruitment_graph()

recruitment_app = get_graph()

# --- PH·∫¶N 2: QU·∫¢N L√ù SESSION V√Ä L·ªäCH S·ª¨ CHAT ---

# Thi·∫øt l·∫≠p session_state ƒë·ªÉ l∆∞u tr·ªØ tin nh·∫Øn, thread_id v√† th√¥ng tin rate limit
if "messages" not in st.session_state:
    st.session_state.messages = []
if "thread_id" not in st.session_state:
    st.session_state.thread_id = str(uuid.uuid4())
if "request_timestamps" not in st.session_state:
    st.session_state.request_timestamps = []
if "daily_request_count" not in st.session_state:
    st.session_state.daily_request_count = 0
if "last_request_date" not in st.session_state:
    st.session_state.last_request_date = datetime.now().date().isoformat()

# Hi·ªÉn th·ªã c√°c tin nh·∫Øn ƒë√£ c√≥ trong l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    # Kh√¥ng hi·ªÉn th·ªã c√°c tin nh·∫Øn c·ªßa ToolMessage cho ng∆∞·ªùi d√πng
    if not isinstance(message, ToolMessage):
        # S·ª¨A L·ªñI: ƒê·ªëi t∆∞·ª£ng message c·ªßa LangChain c√≥ thu·ªôc t√≠nh 'type' thay v√¨ 'role' cho c√°c phi√™n b·∫£n m·ªõi h∆°n, 
        # nh∆∞ng thu·ªôc t√≠nh 'role' v·∫´n t·ªìn t·∫°i cho m·ª•c ƒë√≠ch t∆∞∆°ng th√≠ch.
        # Streamlit c·∫ßn 'user' ho·∫∑c 'assistant'.
        role = "assistant" if isinstance(message, AIMessage) else "user"
        with st.chat_message(role):
            st.markdown(message.content)

# --- PH·∫¶N 3: H√ÄM KI·ªÇM TRA GI·ªöI H·∫†N Y√äU C·∫¶U ---

def check_rate_limits():
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ v∆∞·ª£t qu√° gi·ªõi h·∫°n y√™u c·∫ßu hay kh√¥ng."""
    current_time = time.time()
    current_date = datetime.now().date()

    # 1. Ki·ªÉm tra v√† ƒë·∫∑t l·∫°i gi·ªõi h·∫°n h√†ng ng√†y
    if st.session_state.last_request_date != current_date.isoformat():
        st.session_state.daily_request_count = 0
        st.session_state.last_request_date = current_date.isoformat()
        st.session_state.request_timestamps = [] # ƒê·∫∑t l·∫°i c·∫£ y√™u c·∫ßu m·ªói ph√∫t khi sang ng√†y m·ªõi

    if st.session_state.daily_request_count >= REQUESTS_PER_DAY:
        return False, f"You have reached the daily limit of {REQUESTS_PER_DAY} requests. Please try again tomorrow."

    # 2. Ki·ªÉm tra gi·ªõi h·∫°n m·ªói ph√∫t
    # Lo·∫°i b·ªè c√°c timestamp c≈© h∆°n 60 gi√¢y
    st.session_state.request_timestamps = [
        ts for ts in st.session_state.request_timestamps if current_time - ts < 60
    ]
    if len(st.session_state.request_timestamps) >= REQUESTS_PER_MINUTE:
        return False, f"You have reached the limit of {REQUESTS_PER_MINUTE} requests per minute. Please wait a moment."

    return True, ""

# --- PH·∫¶N 4: X·ª¨ L√ù INPUT C·ª¶A NG∆Ø·ªúI D√ôNG ---

if prompt := st.chat_input("Ask me about Khoa's profile..."):
    
    is_allowed, message = check_rate_limits()
    
    if not is_allowed:
        st.warning(message)
    else:
        # C·∫≠p nh·∫≠t b·ªô ƒë·∫øm gi·ªõi h·∫°n
        st.session_state.request_timestamps.append(time.time())
        st.session_state.daily_request_count += 1

        # S·ª¨A L·ªñI: T·∫°o HumanMessage kh√¥ng c·∫ßn tham s·ªë `role`
        st.session_state.messages.append(HumanMessage(content=prompt))
        with st.chat_message("user"):
            st.markdown(prompt)

        # Hi·ªÉn th·ªã "thinking..." trong khi chatbot ƒëang x·ª≠ l√Ω
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            message_placeholder.markdown("Thinking... ‚ñå")

            # C·∫•u h√¨nh cho graph, quan tr·ªçng nh·∫•t l√† `thread_id`
            config = {"configurable": {"thread_id": st.session_state.thread_id}}
            
            # T·∫°o input cho graph
            inputs = {"messages": [HumanMessage(content=prompt)]}
            
            # G·ªçi graph v√† stream c√¢u tr·∫£ l·ªùi
            full_response = ""
            try:
                for chunk in recruitment_app.stream(inputs, config=config, stream_mode="values"):
                    # L·∫•y tin nh·∫Øn cu·ªëi c√πng t·ª´ state c·ªßa graph
                    last_message = chunk["messages"][-1]
                    # C·∫≠p nh·∫≠t UI ngay khi c√≥ n·ªôi dung m·ªõi
                    if last_message.content:
                        full_response = last_message.content
                        message_placeholder.markdown(full_response + " ‚ñå")
                
                # Ho√†n t·∫•t v√† hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi cu·ªëi c√πng
                message_placeholder.markdown(full_response)
                
                # L·∫•y to√†n b·ªô l·ªãch s·ª≠ t·ª´ graph v√† c·∫≠p nh·∫≠t session_state
                # ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o state (bao g·ªìm ToolMessage) ƒë∆∞·ª£c ƒë·ªìng b·ªô
                final_state = recruitment_app.get_state(config)
                st.session_state.messages = final_state.values()["messages"]

            except Exception as e:
                error_message = f"Sorry, I encountered an error. Please ensure your API keys are correctly configured in Streamlit secrets. Error: {e}"
                st.error(error_message)
                # S·ª¨A L·ªñI: S·ª≠ d·ª•ng AIMessage cho tin nh·∫Øn l·ªói c·ªßa tr·ª£ l√Ω
                st.session_state.messages.append(AIMessage(content=error_message))
