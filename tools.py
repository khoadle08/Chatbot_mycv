# tools.py
import json
from langchain_core.tools import tool
from typing import Optional

def load_cv_data(file_path: str = "mycv.json") -> dict:
    """
    T·∫£i v√† ph√¢n t√≠ch c√∫ ph√°p d·ªØ li·ªáu CV t·ª´ m·ªôt file JSON.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file {file_path}.")
        return {"error": f"File {file_path} kh√¥ng t·ªìn t·∫°i."}
    except json.JSONDecodeError:
        print(f"L·ªói: Kh√¥ng th·ªÉ gi·∫£i m√£ JSON t·ª´ file {file_path}.")
        return {"error": f"N·ªôi dung file {file_path} kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá."}

# T·∫£i d·ªØ li·ªáu CV m·ªôt l·∫ßn khi module ƒë∆∞·ª£c import
CV_DATA = load_cv_data()

@tool
def get_personal_info() -> str:
    """S·ª≠ d·ª•ng c√¥ng c·ª• n√†y ƒë·ªÉ l·∫•y th√¥ng tin c√° nh√¢n c∆° b·∫£n nh∆∞ t√™n, email, s·ªë ƒëi·ªán tho·∫°i, LinkedIn."""
    print("üõ†Ô∏è ƒêang ch·∫°y c√¥ng c·ª•: get_personal_info")
    if "error" in CV_DATA:
        return json.dumps(CV_DATA)
    info = CV_DATA.get("personal_info", {})
    return json.dumps(info, indent=2, ensure_ascii=False)

@tool
def get_introduction() -> str:
    """S·ª≠ d·ª•ng c√¥ng c·ª• n√†y ƒë·ªÉ l·∫•y ƒëo·∫°n gi·ªõi thi·ªáu t·ªïng quan v·ªÅ b·∫£n th√¢n."""
    print("üõ†Ô∏è ƒêang ch·∫°y c√¥ng c·ª•: get_introduction")
    if "error" in CV_DATA:
        return json.dumps(CV_DATA)
    return CV_DATA.get("introduction", "Kh√¥ng c√≥ ƒëo·∫°n gi·ªõi thi·ªáu.")

@tool
def get_work_experience() -> str:
    """S·ª≠ d·ª•ng c√¥ng c·ª• n√†y ƒë·ªÉ l·∫•y to√†n b·ªô th√¥ng tin v·ªÅ kinh nghi·ªám l√†m vi·ªác."""
    print("üõ†Ô∏è ƒêang ch·∫°y c√¥ng c·ª•: get_work_experience")
    if "error" in CV_DATA:
        return json.dumps(CV_DATA)
    experience = CV_DATA.get("experience", [])
    return json.dumps(experience, indent=2, ensure_ascii=False)

@tool
def get_technical_skills() -> str:
    """S·ª≠ d·ª•ng c√¥ng c·ª• n√†y ƒë·ªÉ l·∫•y danh s√°ch c√°c k·ªπ nƒÉng k·ªπ thu·∫≠t, bao g·ªìm ng√¥n ng·ªØ l·∫≠p tr√¨nh, cloud, machine learning, v.v."""
    print("üõ†Ô∏è ƒêang ch·∫°y c√¥ng c·ª•: get_technical_skills")
    if "error" in CV_DATA:
        return json.dumps(CV_DATA)
    skills = CV_DATA.get("technical_skills", {})
    return json.dumps(skills, indent=2, ensure_ascii=False)

@tool
def get_projects_summary() -> str:
    """S·ª≠ d·ª•ng c√¥ng c·ª• n√†y ƒë·ªÉ l·∫•y danh s√°ch t√≥m t·∫Øt t·∫•t c·∫£ c√°c d·ª± √°n ƒë√£ th·ª±c hi·ªán."""
    print("üõ†Ô∏è ƒêang ch·∫°y c√¥ng c·ª•: get_projects_summary")
    if "error" in CV_DATA:
        return json.dumps(CV_DATA)
    projects = CV_DATA.get("projects", [])
    return json.dumps(projects, indent=2, ensure_ascii=False)

@tool
def get_detail_project_info(project_name: str) -> str:
    """S·ª≠ d·ª•ng c√¥ng c·ª• n√†y ƒë·ªÉ l·∫•y th√¥ng tin CHI TI·∫æT v·ªÅ m·ªôt d·ª± √°n c·ª• th·ªÉ. C·∫ßn cung c·∫•p t√™n d·ª± √°n g·∫ßn ƒë√∫ng."""
    print(f"üõ†Ô∏è ƒêang ch·∫°y c√¥ng c·ª•: get_detail_project_info v·ªõi t√™n d·ª± √°n: {project_name}")
    if "error" in CV_DATA:
        return json.dumps(CV_DATA)
    
    detailed_projects = CV_DATA.get("detail_project", [])
    if not detailed_projects:
        return "Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt d·ª± √°n n√†o trong CV."

    # T√¨m ki·∫øm d·ª± √°n g·∫ßn ƒë√∫ng (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)
    for project in detailed_projects:
        if project_name.lower() in project.get("project_name", "").lower():
            return json.dumps(project, indent=2, ensure_ascii=False)
            
    return f"Kh√¥ng t√¨m th·∫•y d·ª± √°n n√†o c√≥ t√™n gi·ªëng '{project_name}'. H√£y th·ª≠ h·ªèi v·ªÅ c√°c d·ª± √°n: SABA InsightAI, Fraud Detection, Formation Tactics, Customer Information Storage, ETL Migration, Market Analysis."

# T·∫≠p h·ª£p t·∫•t c·∫£ c√°c c√¥ng c·ª• v√†o m·ªôt danh s√°ch ƒë·ªÉ agent s·ª≠ d·ª•ng
all_tools = [
    get_personal_info,
    get_introduction,
    get_work_experience,
    get_technical_skills,
    get_projects_summary,
    get_detail_project_info
]
